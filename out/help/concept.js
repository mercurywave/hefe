import { regHelp } from "../main.js";
regHelp([
    { title: "Writing Functions", content: "You can write functions to reuse chunks of code with different parameters. Functions operate on the stream they are passed in, and return a modified stream. They can have additional parameters to control their behavior.<br /><br />You can declare a function like, anywhere in your code. The indented lines below the function definition are the function body. The function contents are not executed until the function is called.<br /><br />function Foo(val)<br />&nbsp;&nbsp;&nbsp;&nbsp;replace(\"a\", val)<br />&nbsp;&nbsp;&nbsp;&nbsp;replace(\"b\", val)<br /><br />You can then call this function from your code like this:<br /><br />\"Call a cab\":Foo(\"?\")<br />// outputs \"C?ll ? c??\"", type: "concepts" },
    { title: "Variables", content: "You can save the contents of a stream to a variable to be reused later. Variables can be named arbitrarily, but must start with a letter and constist of a single word that is not also a function. Variables declared within a scope, such as a map, are private to each parallel stream and closed when the scope closes. Variables at the top level can be seen in the output window under different tabs.<br /><br />[1,2,3]<br />myVar << stream // saves [1,2,3] to the variable myVar<br /><br />The right hand operation is not committed to the stream, so you can save off output without modifying the stream.<br /><br />myVar << [1,2,3] // saves the array to the variable, but the stream from the previous line is left alone", type: "concepts" },
    { title: "Chaining Functions", content: "Sometimes it is useful to take a value and execute additional work on it before moving on without dividing the work on multiple lines.<br /><br />Instead of this:<br />\" 1, 2, 3, 4;\"<br />trim<br />replace(\";\",\"\")<br />split(\", \")<br /><br />You can do this as part of a single expression with the ':' operator:<br />\" 1, 2, 3, 4;\":trim:replace(\";\",\"\"):split(\", \")<br /><br />You can compose these complex expressions inside other expressions.<br /><br />Scope functions like map are a special case, because they have an inner scope on subsequent lines. You can compose using these functions, but only one such scoped function is available on a single line, and you must use '::' instead to denote this.<br /><br />[1,2,3] :: map :: join(\",\")<br />&nbsp;&nbsp;&nbsp;&nbsp;stream + 1<br />// outputs \"2,3,4\"", type: "concepts" }
]);
//# sourceMappingURL=concept.js.map