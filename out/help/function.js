import { regHelp } from "../main.js";
regHelp([
    { title: "Split(delim?)", content: "Splits the input stream into an array, divided by the delimiter.<br /><br />If not passed, the delimiter is \"\\n\".", type: "Functions" },
    { title: "Join(delim?)", content: "Join the input stream array or strings into a single string, with the delimiter inbetween each value.<br /><br />If not passed, the delimiter is \"\\n\".", type: "Functions" },
    { title: "concat(array)", content: "Append the input stream array with additional array nodes.", type: "Functions" },
    { title: "replace(search, replacement)", content: "Search the input stream string for specific strings, and return the original stream where each search term is swapped for the replacement string.", type: "Functions" },
    { title: "piece(delim, pieceNum)", content: "Given a string where the text is delimited by the delim string, returns the piece at the pieceNum index. Piece 1 is the first piece (or whole string if the dlimiter is not present).", type: "Functions" },
    { title: "at(idx)", content: "Given an input array stream, return the individual elemnt at the specified index.", type: "Functions" },
    { title: "length()", content: "If the input string is an array, this returns the number of elements. If the input is a string, this returns the number of characters.", type: "Functions" },
    { title: "contains(search)", content: "Returns true or false whether the input stream string contains the search substring.", type: "Functions" },
    { title: "startsWith(search)", content: "Returns true or false whether the input stream string begins with the search substring.", type: "Functions" },
    { title: "endsWith(search)", content: "Returns true or false whether the input stream string ends with the search substring.", type: "Functions" },
    { title: "trim()", content: "Trims whitespace characters from the start and end of the input stream string.", type: "Functions" },
    { title: "trimStart()", content: "Trims whitespace characters from the start of the input stream string.", type: "Functions" },
    { title: "trimEnd()", content: "Trims whitespace characters from the start of the input stream string.", type: "Functions" },
    { title: "modulo(by)", content: "Performs a modulo operation from an input number. When the input stream number is negative, this is different than the remainder. This will always return a positive number.<br /><br />a << -3<br /><br />a:modulo(10) // 7", type: "Functions" },
    { title: "slice(start, end?)", content: "Return a portion of the array or string where start and end represent the index of the array or characters in the string.<br /><br />Start is the first index used. If end is not passed, the remainder is returned. Otherwise, each element up to the end is returned.<br /><br />\"abcde\":slice(2) // \"cde\"<br /><br />\"abcde\":slice(1,3) // \"bc\"", type: "Functions" },
    { title: "flatten()", content: "Given an array stream where each element is an array, joins the inner contents into a single array of all elements.<br /><br />[[1,2],[3,4,5]]:flatten // [1,2,3,4,5]", type: "Functions" },
    { title: "iif(test, trueVal, falseVal?)", content: "Given a boolean result as a test, executes and returns either the true or false path.<br /><br />If falseVal is not passed, the default is the incoming stream.<br /><br />iif(3 > 2, \"a\", \"b\") // \"a\"<br /><br />Note: the path not needed is not executed, so errors in the unused path do not halt the program.", type: "Functions" },
    { title: "tryParseNum()", content: "Attempt to parse the input string stream into a real number that math can be performed on.<br /><br />\"1.0\":tryParseNum // 1", type: "Functions" },
    { title: "keys()", content: "Given a map as the input stream, returns an array of keys of the map.<br /><br />Given an array, returns the keys of the array ([0,1,2,...]).", type: "Functions" },
    { title: "sortBy", content: "This subroutine takes an array. For each element, you give the element a score via the inner scope, and the final output will be sorted by the score you gave it. Higher scores will sort to a higher index.<br /><br />[\"ccc\", \"bb\", \"a\", \"dddd\"]<br />sortBy<br />&nbsp;&nbsp;&nbsp;&nbsp;length <br />// [\"a\", \"bb\", \"ccc\", \"dddd\"]<br /><br />// TODO: this doesn't work<br />[4,3,1,2]<br />sortBy <br />// [1,2,3,4]", type: "Functions" },
    { title: "sumBy", content: "This subroutine takes an array. For each element, you give the element a score via the inner scope. The final output is the total of all scores.<br /><br />[\"ccc\", \"bb\", \"a\", \"dddd\"]<br />sortBy<br />&nbsp;&nbsp;&nbsp;&nbsp;length <br />// [\"a\", \"bb\", \"ccc\", \"dddd\"]", type: "Functions" },
    { title: "map", content: "This subroutine expects an array. Each element of the array is processed by the inner scope, with that processing being returned into an array at the end.<br /><br />[1,2,3,4]<br />map<br />&nbsp;&nbsp;&nbsp;&nbsp;stream + 1<br />// [2,3,4,5]", type: "Functions" },
    { title: "filter", content: "This subroutine has you evaluate each element in the inner scope. For each element, process a boolean value to determine whether the element should be included in the final output.<br /><br />[1,2,3,4,5]<br />filter<br />&nbsp;&nbsp;&nbsp;&nbsp;modulo(2) = 0<br />// [2,4]", type: "Functions" },
    { title: "pivot", content: "Given an array, create a map that groups elements into a map. In the inner scope, calculate a key which will be used for clustering.<br /><br />[1,2,3,4,5]<br />pivot<br />&nbsp;&nbsp;&nbsp;&nbsp;modulo(2)<br />//{<br />//  0 : [2,4],<br />//  1 : [1,3,5]<br />//}", type: "Functions" },
    { title: "do", content: "This subroutine simply passes through the input and outputs the work of the inner scope. It might be useful for code organization in some cases.", type: "Functions" },
    { title: "exit", content: "Halts script execution immediately, similar to entering debug mode on a line.", type: "Functions" }
]);
//# sourceMappingURL=function.js.map